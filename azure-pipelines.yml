# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml



#trigger:
#  - master

jobs:
  - job: "Unit_Test_Ubuntu_2004_Apt"
    pool:
      vmImage: "ubuntu-20.04"
    steps:
      - script: ./devops/prep-env.sh
        displayName: 'prepare env'
      - script: ./devops/run-test.sh
        displayName: 'run unit test'

  - template: devops/build-ubuntu-vcpkg.yml
    parameters:
      name: 'Unit_Test_Ubuntu_2004_Vcpkg'
      image: 'Ubuntu 20.04'


  - job: "Publish_Doc_As_GitHub_Page"
    pool:
      vmImage: "ubuntu-20.04"
    steps:
      - task: InstallSSHKey@0
        displayName: 'Install an SSH key'
        inputs:
          knownHostsEntry: 'SHA256:AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
          #sshPublicKey: 'id_rsa_azure-github-pipeline'
          sshKeySecureFile: 'id_rsa_azure-github-pipeline'
      - script: |
          sudo apt-get install -y doxygen
        displayName: "Install dependency packages"
      - script: |
          bash ./docs/build-doc.sh
        displayName: "Doxygen generating docs"
      - script: |
          git config user.email "trumanzck@outlook.com"
          git config user.name "Truman Zhou"
          git checkout  gh-pages
          for f in $(ls |grep -v docs); do rm -rf $f; done
          mv docs/doxygen-doc/html/* ./
          rm -rf docs
          for f in $(find ./ -type f ); do git add  $f; done
          git commit -a --amend -m "Update doc"
          git remote set-url --push origin git@github.com:trumanz/cppbind.git
          git push --force
        displayName: "Push to gh-pages branch"

  - job: "Sonar_Scan"
    pool:
      vmImage: "ubuntu-20.04"
    steps:
      - script: ./devops/prep-env.sh
        displayName: 'prepare env'
      - script: bash ./sonar-check.sh
        displayName: 'sonar scan'